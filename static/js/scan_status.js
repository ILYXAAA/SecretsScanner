// Global variables
let refreshInterval;
let taskStatusData = null;
let lastUpdateTime = null;

// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–æ–≤
function getScanData() {
    return {
        status: document.body.dataset.scanStatus,
        id: document.body.dataset.scanId,
        projectName: document.body.dataset.projectName,
        callbackUrl: document.body.dataset.callbackUrl,
        startedAt: document.body.dataset.scanStartedAt,
        startedAtDisplay: document.body.dataset.scanStartedAtDisplay
    };
}

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
async function fetchTaskStatus() {
    const scanData = getScanData();
    
    // –ï—Å–ª–∏ callback URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
    if (!scanData.callbackUrl) {
        console.warn('Callback URL not available, trying alternative endpoint');
        return await fetchTaskStatusAlternative();
    }

    try {
        const response = await fetch(`/secret_scanner/task-status?callback_url=${encodeURIComponent(scanData.callbackUrl)}`);
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();
        
        if (data.status === 'success') {
            return data;
        } else {
            console.error('Task status error:', data.message);
            return null;
        }
    } catch (error) {
        console.error('Error fetching task status:', error);
        // Fallback –∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º—É –º–µ—Ç–æ–¥—É
        return await fetchTaskStatusAlternative();
    }
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ scan ID
async function fetchTaskStatusAlternative() {
    const scanData = getScanData();
    
    if (!scanData.id) {
        console.error('Scan ID not available');
        return null;
    }

    try {
        const response = await fetch(`/secret_scanner/scan/${scanData.id}/task-status`);
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();
        
        if (data.status === 'success') {
            return data;
        } else {
            console.error('Alternative task status error:', data.message);
            return null;
        }
    } catch (error) {
        console.error('Error fetching alternative task status:', error);
        return null;
    }
}

// –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
function updateStatusDisplay(statusData) {
    if (!statusData) {
        displayError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏');
        return;
    }

    taskStatusData = statusData;
    lastUpdateTime = new Date();

    const currentStatus = statusData.current_status;
    const progress = statusData.progress || 0;
    const progressDetail = statusData.progress_detail || '';
    const statusDescription = statusData.status_description || currentStatus;
    const progressFormatted = statusData.progress_formatted || statusDescription;

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—É—Å–∞
    updateMainStatus(currentStatus, statusDescription, progressFormatted);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å (–µ—Å–ª–∏ –µ—Å—Ç—å)
    updateProgressSection(currentStatus, progress, progressDetail, progressFormatted);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    updateTimestamps(statusData);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    updateActionButtons(currentStatus, statusData);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö/–ø—Ä–æ–≤–∞–ª–∏–≤—à–∏—Ö—Å—è –∑–∞–¥–∞—á
    updateAdditionalInfo(currentStatus, statusData);

    console.log('Status updated:', currentStatus, progress);
}

// –û–±–Ω–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç—É—Å
function updateMainStatus(status, description, progressFormatted) {
    const statusContent = document.getElementById('status-content');
    
    const statusConfig = {
        'pending': {
            icon: '‚åõ',
            title: '–ó–∞–¥–∞—á–∞ –≤ –æ—á–µ—Ä–µ–¥–∏',
            desc: '–û–∂–∏–¥–∞–µ—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...',
            showSpinner: false
        },
        'downloading': {
            icon: '‚¨áÔ∏è',
            title: '–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è',
            desc: '–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...',
            showSpinner: true
        },
        'unpacking': {
            icon: 'üì¶',
            title: '–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞',
            desc: progressFormatted,
            showSpinner: true
        },
        'scanning': {
            icon: 'üîç',
            title: '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤',
            desc: progressFormatted,
            showSpinner: true
        },
        'ml_validation': {
            icon: 'ü§ñ',
            title: 'ML –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
            desc: progressFormatted,
            showSpinner: true
        },
        'completed': {
            icon: '‚úÖ',
            title: '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
            desc: '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.',
            showSpinner: false
        },
        'failed': {
            icon: '‚ùå',
            title: '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ',
            desc: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.',
            showSpinner: false
        }
    };

    const config = statusConfig[status] || {
        icon: '‚ùì',
        title: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å',
        desc: description,
        showSpinner: false
    };

    statusContent.innerHTML = `
        ${config.showSpinner ? '<div class="loading-spinner"></div>' : ''}
        <div class="status-icon">${config.icon}</div>
        <h1 class="status-title">${config.title}</h1>
        <p class="status-description">${config.desc}</p>
    `;
}

// –û–±–Ω–æ–≤–∏—Ç—å —Å–µ–∫—Ü–∏—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function updateProgressSection(status, progress, progressDetail, progressFormatted) {
    const progressSection = document.getElementById('progress-section');
    const progressFill = document.getElementById('progress-fill');
    const progressPercentage = document.getElementById('progress-percentage');
    const progressDetailElement = document.getElementById('progress-detail');
    const progressStatusText = document.getElementById('progress-status-text');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ —Å —á–∏—Å–ª–æ–≤—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    if (['unpacking', 'scanning', 'ml_validation'].includes(status) && progress > 0) {
        progressSection.style.display = 'block';
        
        const progressPercent = Math.max(0, Math.min(100, progress));
        progressFill.style.width = `${progressPercent}%`;
        progressPercentage.textContent = `${Math.round(progressPercent)}%`;
        progressStatusText.textContent = progressFormatted;
        
        if (progressDetail) {
            progressDetailElement.textContent = progressDetail;
            progressDetailElement.style.display = 'block';
        } else {
            progressDetailElement.style.display = 'none';
        }
    } else {
        progressSection.style.display = 'none';
    }
}

// –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
function updateTimestamps(statusData) {
    const startedAtDetail = document.getElementById('started-at-detail');
    const completedAtDetail = document.getElementById('completed-at-detail');
    const completedAtValue = document.getElementById('completed-at-value');
    const executionTimeDetail = document.getElementById('execution-time-detail');
    const executionTimeValue = document.getElementById('execution-time-value');

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
    if (statusData.started_at) {
        const startedDate = new Date(statusData.started_at * 1000);
        startedAtDetail.querySelector('.scan-detail-value').textContent = 
            startedDate.toLocaleString('ru-RU');
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    if (statusData.completed_at) {
        const completedDate = new Date(statusData.completed_at * 1000);
        completedAtValue.textContent = completedDate.toLocaleString('ru-RU');
        completedAtDetail.style.display = 'flex';

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if (statusData.execution_time_seconds) {
            executionTimeValue.textContent = formatDuration(statusData.execution_time_seconds);
            executionTimeDetail.style.display = 'flex';
        }
    } else {
        completedAtDetail.style.display = 'none';
        executionTimeDetail.style.display = 'none';
    }
}

// –û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
function updateActionButtons(status, statusData) {
    const dynamicButtons = document.getElementById('dynamic-buttons');
    const refreshBtn = document.getElementById('refresh-btn');
    
    dynamicButtons.innerHTML = '';

    if (status === 'completed') {
        // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        const resultsBtn = document.createElement('a');
        resultsBtn.href = `/secret_scanner/scan/${getScanData().id}/results`;
        resultsBtn.className = 'btn btn-primary';
        resultsBtn.innerHTML = 'üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã';
        dynamicButtons.appendChild(resultsBtn);

        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        refreshBtn.style.display = 'none';

    } else if (status === 'failed') {
        // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–∞–ª–∏–≤—à–∏—Ö—Å—è –∑–∞–¥–∞—á
        const deleteBtn = document.createElement('button');
        deleteBtn.className = 'btn btn-danger';
        deleteBtn.innerHTML = 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–∫–∞–Ω';
        deleteBtn.onclick = () => deleteScan();
        dynamicButtons.appendChild(deleteBtn);

    } else if (['pending', 'downloading', 'unpacking', 'scanning', 'ml_validation'].includes(status)) {
        // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        const cancelBtn = document.createElement('button');
        cancelBtn.className = 'btn btn-danger';
        cancelBtn.innerHTML = '‚èπÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å —Å–∫–∞–Ω';
        cancelBtn.onclick = () => deleteScan();
        dynamicButtons.appendChild(cancelBtn);
    }
}

// –û–±–Ω–æ–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
function updateAdditionalInfo(status, statusData) {
    const resultsSection = document.getElementById('results-section');
    const errorSection = document.getElementById('error-section');
    const elapsedTime = document.getElementById('elapsedTime');
    const logsInfo = document.getElementById('logs-info');
    const logsInfoText = document.getElementById('logs-info-text');

    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    resultsSection.style.display = 'none';
    errorSection.style.display = 'none';
    elapsedTime.style.display = 'none';
    logsInfo.style.display = 'none';

    if (status === 'completed') {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        const resultsInfo = document.getElementById('results-info');
        let resultsText = 'üìä –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ';
        
        if (statusData.results_count !== undefined) {
            resultsText = `üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${statusData.results_count}`;
        }
        
        resultsInfo.textContent = resultsText;
        resultsSection.style.display = 'block';

    } else if (status === 'failed') {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        const errorMessage = document.getElementById('error-message');
        errorMessage.textContent = statusData.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        errorSection.style.display = 'block';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logsInfoText.innerHTML = `
            –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –î–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –ª–æ–≥–∞—Ö —Å–µ—Ä–≤–∏—Å–∞.<br><br>
            <strong>ID —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ª–æ–≥–∞—Ö —Å–µ—Ä–≤–∏—Å–∞:</strong> 
            <br><strong><code style="background: #f8f9fa; padding: 2px 6px; border-radius: 4px; color: #dc3545;">${statusData.task_id}</code></strong><br><br>
            <strong>–ò–º—è –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ª–æ–≥–∞—Ö –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞:</strong> 
            <br><strong><code style="background: #f8f9fa; padding: 2px 6px; border-radius: 4px; color: #dc3545;">${statusData.project_name}</code></strong>
        `;
        logsInfo.style.display = 'block';

    } else if (['pending', 'downloading', 'unpacking', 'scanning', 'ml_validation'].includes(status)) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        if (statusData.started_at) {
            elapsedTime.style.display = 'block';
            updateElapsedTime(statusData.started_at);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏ –¥–ª—è –¥–æ–ª–≥–æ –≤—ã–ø–æ–ª–Ω—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á
        if (['downloading', 'unpacking', 'scanning', 'ml_validation'].includes(status)) {
            logsInfoText.textContent = '–ï—Å–ª–∏ —Å–∫–∞–Ω –∑–∞–≤–∏—Å –∏–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã.';
            logsInfo.style.display = 'block';
        }
    }
}

// –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
function updateElapsedTime(startedAtTimestamp) {
    const elapsedTimeElement = document.getElementById('elapsedTime');
    const scanData = getScanData();
    
    function updateTime() {
        const startTime = new Date(startedAtTimestamp * 1000);
        const now = new Date();
        const elapsed = Math.floor((now - startTime) / 1000);
        
        const hours = Math.floor(elapsed / 3600);
        const minutes = Math.floor((elapsed % 3600) / 60);
        const seconds = elapsed % 60;
        
        let timeStr = '';
        if (hours > 0) {
            timeStr = `${hours}—á ${minutes}–º ${seconds}—Å`;
        } else if (minutes > 0) {
            timeStr = `${minutes}–º ${seconds}—Å`;
        } else {
            timeStr = `${seconds}—Å`;
        }
        
        elapsedTimeElement.innerHTML = `
            –ó–∞–ø—É—â–µ–Ω: ${scanData.startedAtDisplay}<br>
            –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: ${timeStr}
        `;
    }

    updateTime();
    return setInterval(updateTime, 1000);
}

// –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –æ—à–∏–±–∫—É
function displayError(message) {
    const statusContent = document.getElementById('status-content');
    statusContent.innerHTML = `
        <div class="status-icon">‚ö†Ô∏è</div>
        <h1 class="status-title">–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞</h1>
        <p class="status-description">${message}</p>
    `;
}

// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Ä—É—á–Ω—É—é
async function refreshStatus() {
    const refreshBtn = document.getElementById('refresh-btn');
    const originalText = refreshBtn.innerHTML;
    
    refreshBtn.innerHTML = 'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...';
    refreshBtn.disabled = true;
    
    const statusData = await fetchTaskStatus();
    updateStatusDisplay(statusData);
    
    refreshBtn.innerHTML = originalText;
    refreshBtn.disabled = false;
}

// –£–¥–∞–ª–∏—Ç—å —Å–∫–∞–Ω
function deleteScan() {
    const scanData = getScanData();
    
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ?')) {
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = `/secret_scanner/scan/${scanData.id}/delete`;
        
        document.body.appendChild(form);
        form.submit();
    }
}

// –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
function startAutoRefresh() {
    if (refreshInterval) {
        clearInterval(refreshInterval);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
    refreshInterval = setInterval(async () => {
        if (!taskStatusData) return;
        
        const currentStatus = taskStatusData.current_status;
        
        // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
        if (['completed', 'failed'].includes(currentStatus)) {
            stopAutoRefresh();
            
            // –ê–≤—Ç–æ–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
            if (currentStatus === 'completed') {
                setTimeout(() => {
                    window.location.href = `/secret_scanner/scan/${getScanData().id}/results`;
                }, 2000);
            }
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        const statusData = await fetchTaskStatus();
        if (statusData) {
            updateStatusDisplay(statusData);
        }
    }, 3000);
}

// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
function stopAutoRefresh() {
    if (refreshInterval) {
        clearInterval(refreshInterval);
        refreshInterval = null;
    }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function formatDuration(seconds) {
    if (!seconds || seconds < 0) return '-';
    
    if (seconds < 60) {
        return `${seconds.toFixed(1)}—Å`;
    } else if (seconds < 3600) {
        return `${Math.floor(seconds / 60)}–º ${(seconds % 60).toFixed(0)}—Å`;
    } else {
        return `${Math.floor(seconds / 3600)}—á ${Math.floor((seconds % 3600) / 60)}–º`;
    }
}

// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É (fallback)
function refreshPage() {
    window.location.reload();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', async function() {
    console.log('Initializing scan status page...');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    const statusData = await fetchTaskStatus();
    updateStatusDisplay(statusData);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
    if (statusData && !['completed', 'failed'].includes(statusData.current_status)) {
        startAutoRefresh();
    }
});

// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', function() {
    stopAutoRefresh();
});